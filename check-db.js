const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkLeafletsData() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ Leaflets –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–≤–∏—Å Leaflets
    const service = await prisma.service.findUnique({
      where: { slug: 'leaflets' },
      include: {
        rows: {
          where: { isActive: true },
          select: { id: true, attrs: true }
        }
      }
    });
    
    if (!service) {
      console.log('‚ùå –°–µ—Ä–≤–∏—Å Leaflets –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`‚úÖ –°–µ—Ä–≤–∏—Å –Ω–∞–π–¥–µ–Ω: ${service.name} (ID: ${service.id})`);
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Ü–µ–Ω: ${service.rows.length}\n`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
    const attrsMap = new Map();
    
    service.rows.forEach((row, index) => {
      console.log(`–°—Ç—Ä–æ–∫–∞ ${index + 1} (ID: ${row.id}):`);
      console.log(`  attrs (—Å—Ç—Ä–æ–∫–∞): ${row.attrs}`);
      
      try {
        const attrs = typeof row.attrs === 'string' ? JSON.parse(row.attrs) : row.attrs;
        console.log(`  attrs (–æ–±—ä–µ–∫—Ç):`, attrs);
        
        Object.entries(attrs).forEach(([key, value]) => {
          if (!attrsMap.has(key)) {
            attrsMap.set(key, new Set());
          }
          attrsMap.get(key).add(value);
        });
      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${error.message}`);
      }
      console.log('');
    });
    
    console.log('üìã –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã:');
    attrsMap.forEach((values, key) => {
      const valuesArray = Array.from(values);
      console.log(`  ${key}: ${valuesArray.length} –∑–Ω–∞—á–µ–Ω–∏–π - [${valuesArray.join(', ')}]`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkLeafletsData();
