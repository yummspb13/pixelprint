import { PrismaClient } from '@prisma/client';
import fs from 'fs';
import path from 'path';

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Supabase PostgreSQL
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL
    }
  }
});

async function importData() {
  try {
    console.log('üîÑ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Supabase...');

    // –ß–∏—Ç–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const exportPath = path.join(process.cwd(), 'data-export.json');
    if (!fs.existsSync(exportPath)) {
      throw new Error('–§–∞–π–ª data-export.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ export-sqlite-data.ts');
    }

    const exportData = JSON.parse(fs.readFileSync(exportPath, 'utf8'));
    console.log(`üìÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: ${exportData.exportedAt}`);

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
    console.log('üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...');
    await prisma.orderItem.deleteMany();
    await prisma.order.deleteMany();
    await prisma.verificationToken.deleteMany();
    await prisma.session.deleteMany();
    await prisma.account.deleteMany();
    await prisma.user.deleteMany();
    await prisma.whyArticle.deleteMany();
    await prisma.service.deleteMany();

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log('üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Services...');
    for (const service of exportData.services) {
      await prisma.service.create({
        data: {
          ...service,
          id: undefined, // –ü–æ–∑–≤–æ–ª—è–µ–º PostgreSQL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π ID
        }
      });
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Why Articles...');
    for (const article of exportData.whyArticles) {
      await prisma.whyArticle.create({
        data: {
          ...article,
          id: undefined,
        }
      });
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Users...');
    for (const user of exportData.users) {
      await prisma.user.create({
        data: {
          ...user,
          id: undefined,
        }
      });
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Accounts...');
    for (const account of exportData.accounts) {
      await prisma.account.create({
        data: {
          ...account,
          id: undefined,
        }
      });
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Sessions...');
    for (const session of exportData.sessions) {
      await prisma.session.create({
        data: {
          ...session,
          id: undefined,
        }
      });
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Verification Tokens...');
    for (const token of exportData.verificationTokens) {
      await prisma.verificationToken.create({
        data: {
          ...token,
          id: undefined,
        }
      });
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Orders...');
    for (const order of exportData.orders) {
      await prisma.order.create({
        data: {
          ...order,
          id: undefined,
        }
      });
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Order Items...');
    for (const item of exportData.orderItems) {
      await prisma.orderItem.create({
        data: {
          ...item,
          id: undefined,
        }
      });
    }

    console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:`);
    console.log(`   - Services: ${exportData.services.length}`);
    console.log(`   - Why Articles: ${exportData.whyArticles.length}`);
    console.log(`   - Users: ${exportData.users.length}`);
    console.log(`   - Orders: ${exportData.orders.length}`);
    console.log(`   - Order Items: ${exportData.orderItems.length}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

importData();
