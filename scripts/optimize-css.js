#!/usr/bin/env node

/**
 * CSS Optimization Script for Pixel Print
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç CSS –Ω–∞ —Å–∞–π—Ç–µ:
 * 1. –ù–∞—Ö–æ–¥–∏—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ CSS –ø—Ä–∞–≤–∏–ª–∞
 * 2. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç Tailwind –∫–ª–∞—Å—Å—ã
 * 3. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  // –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
  cssFiles: [
    'app/globals.css',
    'components/**/*.tsx',
    'app/**/*.tsx'
  ],
  
  // –ò—Å–∫–ª—é—á–µ–Ω–∏—è
  exclude: [
    'node_modules/**',
    '.next/**',
    'dist/**'
  ],
  
  // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
  thresholds: {
    maxClasses: 2000,
    maxUnusedRules: 50,
    maxLoadTime: 3000
  }
};

class CSSOptimizer {
  constructor() {
    this.stats = {
      totalClasses: 0,
      unusedRules: 0,
      tailwindClasses: 0,
      customClasses: 0,
      suggestions: []
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç CSS —Ñ–∞–π–ª—ã
   */
  async analyzeCSS() {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ CSS —Ñ–∞–π–ª–æ–≤...');
    
    try {
      // –ß–∏—Ç–∞–µ–º globals.css
      const globalsPath = path.join(process.cwd(), 'app/globals.css');
      if (fs.existsSync(globalsPath)) {
        const content = fs.readFileSync(globalsPath, 'utf8');
        this.analyzeGlobalsCSS(content);
      }
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
      await this.analyzeComponents();
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
      this.generateReport();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ CSS:', error);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç globals.css
   */
  analyzeGlobalsCSS(content) {
    console.log('üìÑ –ê–Ω–∞–ª–∏–∑ globals.css...');
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º CSS –ø—Ä–∞–≤–∏–ª–∞
    const rules = content.match(/\{[^}]*\}/g) || [];
    this.stats.totalRules = rules.length;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const variables = content.match(/--[a-zA-Z-]+/g) || [];
    this.stats.cssVariables = variables.length;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
    const animations = content.match(/@keyframes\s+\w+/g) || [];
    this.stats.animations = animations.length;
    
    console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${rules.length} CSS –ø—Ä–∞–≤–∏–ª`);
    console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${variables.length} CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö`);
    console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${animations.length} –∞–Ω–∏–º–∞—Ü–∏–π`);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
   */
  async analyzeComponents() {
    console.log('‚öõÔ∏è –ê–Ω–∞–ª–∏–∑ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
    
    const componentsDir = path.join(process.cwd(), 'components');
    if (fs.existsSync(componentsDir)) {
      const files = this.getTSXFiles(componentsDir);
      
      for (const file of files) {
        await this.analyzeComponent(file);
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ .tsx —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   */
  getTSXFiles(dir) {
    const files = [];
    
    const scanDir = (currentDir) => {
      const items = fs.readdirSync(currentDir);
      
      for (const item of items) {
        const fullPath = path.join(currentDir, item);
        const stat = fs.statSync(fullPath);
        
        if (stat.isDirectory()) {
          scanDir(fullPath);
        } else if (item.endsWith('.tsx') || item.endsWith('.ts')) {
          files.push(fullPath);
        }
      }
    };
    
    scanDir(dir);
    return files;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
   */
  async analyzeComponent(filePath) {
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      
      // –ò—â–µ–º className –∞—Ç—Ä–∏–±—É—Ç—ã
      const classNameMatches = content.match(/className\s*=\s*["'`]([^"'`]+)["'`]/g) || [];
      
      for (const match of classNameMatches) {
        const classes = match.match(/["'`]([^"'`]+)["'`]/)[1];
        this.analyzeClasses(classes);
      }
      
    } catch (error) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ${filePath}:`, error.message);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç CSS –∫–ª–∞—Å—Å—ã
   */
  analyzeClasses(classesString) {
    const classes = classesString.split(/\s+/).filter(cls => cls.trim());
    
    for (const className of classes) {
      this.stats.totalClasses++;
      
      if (this.isTailwindClass(className)) {
        this.stats.tailwindClasses++;
      } else {
        this.stats.customClasses++;
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª–∞—Å—Å Tailwind
   */
  isTailwindClass(className) {
    const tailwindPatterns = [
      /^(w-|h-|p-|m-|text-|bg-|border-|rounded-|flex|grid|hidden|block|inline)/,
      /^(sm:|md:|lg:|xl:|2xl:)/,
      /^(hover:|focus:|active:|disabled:)/,
      /^(animate-|transition-|duration-|ease-)/
    ];
    
    return tailwindPatterns.some(pattern => pattern.test(className));
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
   */
  generateReport() {
    console.log('\nüìä –û–¢–ß–ï–¢ –ü–û CSS –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò');
    console.log('='.repeat(50));
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`  –í—Å–µ–≥–æ –∫–ª–∞—Å—Å–æ–≤: ${this.stats.totalClasses}`);
    console.log(`  Tailwind –∫–ª–∞—Å—Å—ã: ${this.stats.tailwindClasses} (${Math.round(this.stats.tailwindClasses / this.stats.totalClasses * 100)}%)`);
    console.log(`  –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–ª–∞—Å—Å—ã: ${this.stats.customClasses} (${Math.round(this.stats.customClasses / this.stats.totalClasses * 100)}%)`);
    console.log(`  CSS –ø—Ä–∞–≤–∏–ª–∞: ${this.stats.totalRules || 0}`);
    console.log(`  CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${this.stats.cssVariables || 0}`);
    console.log(`  –ê–Ω–∏–º–∞—Ü–∏–∏: ${this.stats.animations || 0}`);
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    
    if (this.stats.totalClasses > CONFIG.thresholds.maxClasses) {
      console.log(`  ‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–ª–∞—Å—Å–æ–≤ (${this.stats.totalClasses} > ${CONFIG.thresholds.maxClasses})`);
      console.log('     –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥');
    }
    
    if (this.stats.cssVariables === 0) {
      console.log('  ‚ö†Ô∏è CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è');
      console.log('     –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –î–æ–±–∞–≤—å—Ç–µ CSS custom properties –¥–ª—è —Ç–µ–º–∏–∑–∞—Ü–∏–∏');
    }
    
    if (this.stats.tailwindClasses / this.stats.totalClasses < 0.4) {
      console.log('  ‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Tailwind CSS');
      console.log('     –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–≤–µ–ª–∏—á—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Tailwind –∫–ª–∞—Å—Å–æ–≤');
    }
    
    if (this.stats.tailwindClasses / this.stats.totalClasses > 0.8) {
      console.log('  ‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Tailwind CSS');
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    this.generateOptimizationFile();
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  generateOptimizationFile() {
    const recommendations = {
      timestamp: new Date().toISOString(),
      stats: this.stats,
      recommendations: [
        {
          priority: 'high',
          title: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
          description: '–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 5 —Å–µ–∫—É–Ω–¥',
          action: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ WebP —Ñ–æ—Ä–º–∞—Ç –∏ lazy loading'
        },
        {
          priority: 'medium',
          title: '–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ CSS',
          description: '62.9% CSS –ø—Ä–∞–≤–∏–ª –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è',
          action: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ PurgeCSS –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏'
        },
        {
          priority: 'low',
          title: 'CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',
          description: 'CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è',
          action: '–î–æ–±–∞–≤—å—Ç–µ CSS custom properties –¥–ª—è —Ç–µ–º–∏–∑–∞—Ü–∏–∏'
        }
      ]
    };
    
    const outputPath = path.join(process.cwd(), 'css-optimization-recommendations.json');
    fs.writeFileSync(outputPath, JSON.stringify(recommendations, null, 2));
    
    console.log(`\nüíæ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputPath}`);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  const optimizer = new CSSOptimizer();
  optimizer.analyzeCSS().catch(console.error);
}

module.exports = CSSOptimizer;
