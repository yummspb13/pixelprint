const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è Supabase PostgreSQL
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: "postgresql://postgres.nrtznccqxnfbvgarbqua:Rat606727931@aws-1-eu-west-2.pooler.supabase.com:6543/postgres?pgbouncer=true&sslmode=require"
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ timestamp –≤ Date
function convertTimestamp(timestamp) {
  return new Date(timestamp);
}

async function importMissingData() {
  try {
    console.log('üöÄ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...');

    // 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MenuTiles —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤
    console.log('üçΩÔ∏è –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MenuTiles...');
    const menuTilesData = fs.readFileSync('menu_tiles.json', 'utf8');
    const menuTiles = JSON.parse(menuTilesData);
    
    let importedMenuTiles = 0;
    for (const menuTile of menuTiles) {
      try {
        await prisma.menuTile.create({
          data: {
            ...menuTile,
            isActive: Boolean(menuTile.isActive),
            createdAt: convertTimestamp(menuTile.createdAt),
            updatedAt: convertTimestamp(menuTile.updatedAt)
          }
        });
        importedMenuTiles++;
        console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω menu tile: ${menuTile.label}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ menu tile ${menuTile.id}:`, error.message);
      }
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedMenuTiles} menu tiles`);

    // 2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º WhyArticles —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤
    console.log('üìù –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º WhyArticles...');
    const whyArticlesData = fs.readFileSync('why_articles.json', 'utf8');
    const whyArticles = JSON.parse(whyArticlesData);
    
    let importedWhyArticles = 0;
    for (const whyArticle of whyArticles) {
      try {
        await prisma.whyArticle.create({
          data: {
            ...whyArticle,
            isActive: Boolean(whyArticle.isActive),
            createdAt: convertTimestamp(whyArticle.createdAt),
            updatedAt: convertTimestamp(whyArticle.updatedAt)
          }
        });
        importedWhyArticles++;
        console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç–∞—Ç—å—è: ${whyArticle.title}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ why article ${whyArticle.id}:`, error.message);
      }
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedWhyArticles} why articles`);

    console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log(`üìä –ò—Ç–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:`);
    console.log(`  - MenuTiles: ${importedMenuTiles}`);
    console.log(`  - WhyArticles: ${importedWhyArticles}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

importMissingData();
