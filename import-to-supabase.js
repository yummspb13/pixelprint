const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è Supabase PostgreSQL
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: "postgresql://postgres.nrtznccqxnfbvgarbqua:Rat606727931@aws-1-eu-west-2.pooler.supabase.com:6543/postgres?pgbouncer=true&sslmode=require"
    }
  }
});

async function importData() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Supabase...');

    // 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Services
    console.log('üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Services...');
    const servicesData = fs.readFileSync('services.json', 'utf8');
    const services = JSON.parse(servicesData);
    
    for (const service of services) {
      try {
        await prisma.service.upsert({
          where: { id: service.id },
          update: service,
          create: service
        });
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å–µ—Ä–≤–∏—Å–∞ ${service.id}:`, error.message);
      }
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${services.length} —Å–µ—Ä–≤–∏—Å–æ–≤`);

    // 2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º PriceRows
    console.log('üí∞ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º PriceRows...');
    const priceRowsData = fs.readFileSync('price_rows.json', 'utf8');
    const priceRows = JSON.parse(priceRowsData);
    
    for (const priceRow of priceRows) {
      try {
        await prisma.priceRow.upsert({
          where: { id: priceRow.id },
          update: priceRow,
          create: priceRow
        });
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ price row ${priceRow.id}:`, error.message);
      }
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${priceRows.length} price rows`);

    // 3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Tiers
    console.log('üìä –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Tiers...');
    const tiersData = fs.readFileSync('tiers.json', 'utf8');
    const tiers = JSON.parse(tiersData);
    
    for (const tier of tiers) {
      try {
        await prisma.tier.upsert({
          where: { id: tier.id },
          update: tier,
          create: tier
        });
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ tier ${tier.id}:`, error.message);
      }
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${tiers.length} tiers`);

    // 4. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MenuTiles
    console.log('üçΩÔ∏è –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MenuTiles...');
    const menuTilesData = fs.readFileSync('menu_tiles.json', 'utf8');
    const menuTiles = JSON.parse(menuTilesData);
    
    for (const menuTile of menuTiles) {
      try {
        await prisma.menuTile.upsert({
          where: { id: menuTile.id },
          update: menuTile,
          create: menuTile
        });
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ menu tile ${menuTile.id}:`, error.message);
      }
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${menuTiles.length} menu tiles`);

    // 5. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º WhyArticles
    console.log('üìù –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º WhyArticles...');
    const whyArticlesData = fs.readFileSync('why_articles.json', 'utf8');
    const whyArticles = JSON.parse(whyArticlesData);
    
    for (const whyArticle of whyArticles) {
      try {
        await prisma.whyArticle.upsert({
          where: { id: whyArticle.id },
          update: whyArticle,
          create: whyArticle
        });
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ why article ${whyArticle.id}:`, error.message);
      }
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${whyArticles.length} why articles`);

    console.log('üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

importData();
