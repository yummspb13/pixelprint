const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è Supabase PostgreSQL
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: "postgresql://postgres.nrtznccqxnfbvgarbqua:Rat606727931@aws-1-eu-west-2.pooler.supabase.com:6543/postgres?pgbouncer=true&sslmode=require"
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ timestamp –≤ Date
function convertTimestamp(timestamp) {
  return new Date(timestamp);
}

async function correctImport() {
  try {
    console.log('üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Supabase...');

    // 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    await prisma.tier.deleteMany();
    console.log('‚úÖ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ tiers');

    await prisma.priceRow.deleteMany();
    console.log('‚úÖ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ price rows');

    await prisma.service.deleteMany();
    console.log('‚úÖ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ services');

    await prisma.menuTile.deleteMany();
    console.log('‚úÖ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ menu tiles');

    await prisma.whyArticle.deleteMany();
    console.log('‚úÖ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ why articles');

    await prisma.settings.deleteMany();
    console.log('‚úÖ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ settings');

    console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

    // 2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Services —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤
    console.log('üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Services...');
    const servicesData = fs.readFileSync('services.json', 'utf8');
    const services = JSON.parse(servicesData);
    
    let importedServices = 0;
    for (const service of services) {
      try {
        await prisma.service.create({
          data: {
            ...service,
            isActive: Boolean(service.isActive),
            configuratorEnabled: Boolean(service.configuratorEnabled),
            calculatorAvailable: Boolean(service.calculatorAvailable),
            createdAt: convertTimestamp(service.createdAt),
            updatedAt: convertTimestamp(service.updatedAt)
          }
        });
        importedServices++;
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å–µ—Ä–≤–∏—Å–∞ ${service.id}:`, error.message);
      }
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedServices} —Å–µ—Ä–≤–∏—Å–æ–≤`);

    // 3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º PriceRows —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤
    console.log('üí∞ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º PriceRows...');
    const priceRowsData = fs.readFileSync('price_rows.json', 'utf8');
    const priceRows = JSON.parse(priceRowsData);
    
    let importedPriceRows = 0;
    for (const priceRow of priceRows) {
      try {
        await prisma.priceRow.create({
          data: {
            ...priceRow,
            isActive: Boolean(priceRow.isActive),
            createdAt: convertTimestamp(priceRow.createdAt),
            updatedAt: convertTimestamp(priceRow.updatedAt)
          }
        });
        importedPriceRows++;
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ price row ${priceRow.id}:`, error.message);
      }
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedPriceRows} price rows`);

    // 4. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö price row IDs
    const existingPriceRowIds = await prisma.priceRow.findMany({
      select: { id: true }
    });
    const existingIds = new Set(existingPriceRowIds.map(row => row.id));
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${existingIds.size} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö price rows`);

    // 5. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ Tiers, –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ PriceRows
    console.log('üìä –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Tiers...');
    const tiersData = fs.readFileSync('tiers.json', 'utf8');
    const tiers = JSON.parse(tiersData);
    
    let importedTiers = 0;
    let skippedTiers = 0;
    for (const tier of tiers) {
      try {
        if (existingIds.has(tier.rowId)) {
          await prisma.tier.create({
            data: tier
          });
          importedTiers++;
        } else {
          skippedTiers++;
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ tier ${tier.id}:`, error.message);
      }
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedTiers} tiers, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${skippedTiers} tiers`);

    // 6. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MenuTiles —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤
    console.log('üçΩÔ∏è –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MenuTiles...');
    const menuTilesData = fs.readFileSync('menu_tiles.json', 'utf8');
    const menuTiles = JSON.parse(menuTilesData);
    
    let importedMenuTiles = 0;
    for (const menuTile of menuTiles) {
      try {
        await prisma.menuTile.create({
          data: {
            ...menuTile,
            isActive: Boolean(menuTile.isActive),
            createdAt: convertTimestamp(menuTile.createdAt),
            updatedAt: convertTimestamp(menuTile.updatedAt)
          }
        });
        importedMenuTiles++;
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ menu tile ${menuTile.id}:`, error.message);
      }
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedMenuTiles} menu tiles`);

    // 7. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º WhyArticles —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤
    console.log('üìù –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º WhyArticles...');
    const whyArticlesData = fs.readFileSync('why_articles.json', 'utf8');
    const whyArticles = JSON.parse(whyArticlesData);
    
    let importedWhyArticles = 0;
    for (const whyArticle of whyArticles) {
      try {
        await prisma.whyArticle.create({
          data: {
            ...whyArticle,
            isActive: Boolean(whyArticle.isActive),
            createdAt: convertTimestamp(whyArticle.createdAt),
            updatedAt: convertTimestamp(whyArticle.updatedAt)
          }
        });
        importedWhyArticles++;
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ why article ${whyArticle.id}:`, error.message);
      }
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedWhyArticles} why articles`);

    console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìä –ò—Ç–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:`);
    console.log(`  - Services: ${importedServices}`);
    console.log(`  - PriceRows: ${importedPriceRows}`);
    console.log(`  - Tiers: ${importedTiers}`);
    console.log(`  - MenuTiles: ${importedMenuTiles}`);
    console.log(`  - WhyArticles: ${importedWhyArticles}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

correctImport();
