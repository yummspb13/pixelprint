const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

const prisma = new PrismaClient();

async function fixLeafletsTiers() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º tiers –¥–ª—è Leaflets...\n');
    
    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
    const priceRows = JSON.parse(fs.readFileSync('price_rows.json', 'utf8'));
    const tiers = JSON.parse(fs.readFileSync('tiers.json', 'utf8'));
    
    // –ù–∞—Ö–æ–¥–∏–º Leaflets –≤ JSON
    const leafletsRows = priceRows.filter(row => row.serviceId === 190);
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${leafletsRows.length} —Å—Ç—Ä–æ–∫ Leaflets –≤ JSON`);
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–≤–∏—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const service = await prisma.service.findUnique({
      where: { slug: 'leaflets' }
    });
    
    if (!service) {
      console.log('‚ùå –°–µ—Ä–≤–∏—Å Leaflets –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`‚úÖ –°–µ—Ä–≤–∏—Å –Ω–∞–π–¥–µ–Ω: ${service.name} (ID: ${service.id})\n`);
    
    // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö ID –Ω–∞ –Ω–æ–≤—ã–µ ID
    const idMapping = new Map();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ü–µ–Ω –∏–∑ –±–∞–∑—ã
    const currentRows = await prisma.priceRow.findMany({
      where: { serviceId: service.id },
      orderBy: { id: 'asc' }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${currentRows.length} —Å—Ç—Ä–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
    
    // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º
    for (let i = 0; i < leafletsRows.length && i < currentRows.length; i++) {
      const jsonRow = leafletsRows[i];
      const dbRow = currentRows[i];
      
      const jsonAttrs = JSON.parse(jsonRow.attrs);
      const dbAttrs = JSON.parse(dbRow.attrs);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ç—Ä–∏–±—É—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
      const attrsMatch = Object.keys(jsonAttrs).every(key => 
        jsonAttrs[key] === dbAttrs[key]
      );
      
      if (attrsMatch) {
        idMapping.set(jsonRow.id, dbRow.id);
        console.log(`‚úÖ –ú–∞–ø–ø–∏–Ω–≥: JSON ${jsonRow.id} -> DB ${dbRow.id}`);
      } else {
        console.log(`‚ùå –ê—Ç—Ä–∏–±—É—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${jsonRow.id}`);
      }
    }
    
    console.log(`\nüìä –°–æ–∑–¥–∞–Ω–æ ${idMapping.size} –º–∞–ø–ø–∏–Ω–≥–æ–≤\n`);
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º tiers
    const leafletsTiers = tiers.filter(tier => idMapping.has(tier.rowId));
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${leafletsTiers.length} tiers –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞\n`);
    
    let importedCount = 0;
    let errorCount = 0;
    
    for (const tier of leafletsTiers) {
      try {
        const newRowId = idMapping.get(tier.rowId);
        if (!newRowId) {
          console.log(`‚ö†Ô∏è –ù–µ—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è rowId ${tier.rowId}`);
          continue;
        }
        
        await prisma.tier.create({
          data: {
            rowId: newRowId,
            qty: tier.qty,
            unit: tier.unit
          }
        });
        
        importedCount++;
        if (importedCount % 20 === 0) {
          console.log(`  ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedCount} tiers...`);
        }
        
      } catch (error) {
        errorCount++;
        if (errorCount <= 5) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
          console.log(`  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ tier ${tier.id}: ${error.message}`);
        }
      }
    }
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞:`);
    console.log(`  ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${importedCount} tiers`);
    console.log(`  ‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...`);
    const updatedService = await prisma.service.findUnique({
      where: { slug: 'leaflets' },
      include: {
        rows: {
          where: { isActive: true },
          include: { tiers: true }
        }
      }
    });
    
    let totalTiers = 0;
    updatedService.rows.forEach((row, index) => {
      totalTiers += row.tiers.length;
      if (index < 3) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
        console.log(`–°—Ç—Ä–æ–∫–∞ ${index + 1}: ${row.tiers.length} tiers`);
        if (row.tiers.length > 0) {
          row.tiers.slice(0, 3).forEach(tier => {
            console.log(`  ${tier.qty} —à—Ç: ¬£${tier.unit}`);
          });
        }
      }
    });
    
    console.log(`\n‚úÖ –ò—Ç–æ–≥–æ tiers –≤ –±–∞–∑–µ: ${totalTiers}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixLeafletsTiers();
