generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Service {
  id                  Int             @id @default(autoincrement())
  slug                String          @unique
  name                String
  description         String?
  image               String?
  category            String
  order               Int             @default(0)
  categoryOrder       Int             @default(0)
  isActive            Boolean         @default(true)
  configuratorEnabled Boolean         @default(false)
  calculatorAvailable Boolean         @default(false)
  clickCount          Int             @default(0)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  changeHistory       ChangeHistory[]
  rows                PriceRow[]
}

model PriceRow {
  id            Int             @id @default(autoincrement())
  serviceId     Int
  attrs         Json
  ruleKind      PriceRuleKind
  unit          Float?
  setup         Float?
  fixed         Float?
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  changeHistory ChangeHistory[]
  service       Service         @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  tiers         Tier[]
}

model Tier {
  id    Int      @id @default(autoincrement())
  rowId Int
  qty   Int
  unit  Float
  row   PriceRow @relation(fields: [rowId], references: [id], onDelete: Cascade)
}

model ChangeHistory {
  id          Int       @id @default(autoincrement())
  serviceId   Int
  rowId       Int?
  changeType  String
  description String
  oldData     String?
  newData     String?
  createdAt   DateTime  @default(now())
  row         PriceRow? @relation(fields: [rowId], references: [id], onDelete: Cascade)
  service     Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  orders        Order[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id                   Int         @id @default(autoincrement())
  orderNumber          String      @unique
  customerName         String
  customerEmail        String
  customerPhone        String?
  totalAmount          Float
  status               String
  paymentMethod        String
  deliveryDate         DateTime
  specialInstructions  String?
  deliveryAddress      String?
  deliveryCity         String?
  deliveryPostcode     String?
  deliveryCountry      String?     @default("UK")
  deliveryContactName  String?
  deliveryContactPhone String?
  deliveryCost         Float?      @default(15.0)
  userId               String?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  invoices             Invoice[]
  user                 User?       @relation(fields: [userId], references: [id])
  orderItems           OrderItem[]
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  orderId     Int
  serviceName String
  serviceSlug String
  parameters  String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  fileName    String?
  fileSize    Int?
  filePath    String?
  notes       String?
  createdAt   DateTime @default(now())
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Invoice {
  id            Int      @id @default(autoincrement())
  orderId       Int
  invoiceNumber String   @unique
  invoiceDate   String
  taxPoint      String
  billTo        String
  paymentTerms  String
  items         Json
  subtotal      Float
  discount      Float    @default(0)
  discountType  String?
  vatRate       Float    @default(20)
  vatAmount     Float
  total         Float
  status        String   @default("draft")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model MenuTile {
  id        Int      @id @default(autoincrement())
  label     String
  href      String
  image     String?
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WhyArticle {
  id        Int      @id @default(autoincrement())
  title     String
  text      String
  image     String?
  href      String?
  span      String?
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  content   String?
  images    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Settings {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  category    String   @default("general")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum PriceRuleKind {
  tiers
  perUnit
  fixed
}
