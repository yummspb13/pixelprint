const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

const prisma = new PrismaClient();

async function updateLeafletsData() {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Leaflets...\n');
    
    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
    const priceRows = JSON.parse(fs.readFileSync('price_rows.json', 'utf8'));
    const leafletsRows = priceRows.filter(row => row.serviceId === 190);
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${leafletsRows.length} —Å—Ç—Ä–æ–∫ –¥–ª—è Leaflets –≤ JSON`);
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–≤–∏—Å Leaflets
    const service = await prisma.service.findUnique({
      where: { slug: 'leaflets' }
    });
    
    if (!service) {
      console.log('‚ùå –°–µ—Ä–≤–∏—Å Leaflets –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`‚úÖ –°–µ—Ä–≤–∏—Å –Ω–∞–π–¥–µ–Ω: ${service.name} (ID: ${service.id})\n`);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ü–µ–Ω
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ü–µ–Ω...');
    await prisma.priceRow.deleteMany({
      where: { serviceId: service.id }
    });
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    
    for (const row of leafletsRows) {
      try {
        await prisma.priceRow.create({
          data: {
            serviceId: service.id,
            attrs: row.attrs, // JSON —Å—Ç—Ä–æ–∫–∞
            ruleKind: row.ruleKind,
            unit: row.unit,
            setup: row.setup,
            fixed: row.fixed,
            isActive: Boolean(row.isActive),
            createdAt: new Date(row.createdAt),
            updatedAt: new Date(row.updatedAt)
          }
        });
        console.log(`  ‚úÖ –°—Ç—Ä–æ–∫–∞ ${row.id} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞`);
      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–æ–∫–∏ ${row.id}: ${error.message}`);
      }
    }
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º tiers
    console.log('\nüìä –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º tiers...');
    const tiers = JSON.parse(fs.readFileSync('tiers.json', 'utf8'));
    const leafletsTiers = tiers.filter(tier => {
      // –ù–∞—Ö–æ–¥–∏–º rowId –¥–ª—è Leaflets
      const priceRow = leafletsRows.find(row => row.id === tier.rowId);
      return priceRow;
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${leafletsTiers.length} tiers –¥–ª—è Leaflets`);
    
    for (const tier of leafletsTiers) {
      try {
        await prisma.tier.create({
          data: {
            rowId: tier.rowId,
            qty: tier.qty,
            unit: tier.unit
          }
        });
        console.log(`  ‚úÖ Tier ${tier.id} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω`);
      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ tier ${tier.id}: ${error.message}`);
      }
    }
    
    console.log('\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const updatedService = await prisma.service.findUnique({
      where: { slug: 'leaflets' },
      include: {
        rows: {
          where: { isActive: true },
          select: { id: true, attrs: true }
        }
      }
    });
    
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç:');
    const attrsMap = new Map();
    updatedService.rows.forEach(row => {
      const attrs = JSON.parse(row.attrs);
      Object.entries(attrs).forEach(([key, value]) => {
        if (!attrsMap.has(key)) {
          attrsMap.set(key, new Set());
        }
        attrsMap.get(key).add(value);
      });
    });
    
    attrsMap.forEach((values, key) => {
      const valuesArray = Array.from(values);
      console.log(`  ${key}: [${valuesArray.join(', ')}]`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

updateLeafletsData();
