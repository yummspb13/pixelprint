const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è Supabase PostgreSQL
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: "postgresql://postgres.nrtznccqxnfbvgarbqua:Rat606727931@aws-1-eu-west-2.pooler.supabase.com:6543/postgres?pgbouncer=true"
    }
  }
});

async function correctImportData() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Supabase...');
    
    // –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('üßπ –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    await prisma.tier.deleteMany();
    await prisma.priceRow.deleteMany();
    await prisma.service.deleteMany();
    await prisma.menuTile.deleteMany();
    await prisma.whyArticle.deleteMany();
    await prisma.settings.deleteMany();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');

    // 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Services
    console.log('üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Services...');
    const servicesData = fs.readFileSync('services.json', 'utf8');
    const services = JSON.parse(servicesData);
    
    let importedServices = 0;
    for (const service of services) {
      try {
        await prisma.service.create({
          data: {
            id: service.id,
            slug: service.slug,
            name: service.name,
            description: service.description,
            image: service.image,
            category: service.category,
            order: service.order || 0,
            categoryOrder: service.categoryOrder || 0,
            isActive: Boolean(service.isActive),
            configuratorEnabled: Boolean(service.configuratorEnabled),
            calculatorAvailable: Boolean(service.calculatorAvailable),
            clickCount: service.clickCount || 0,
            createdAt: service.createdAt ? new Date(service.createdAt) : new Date(),
            updatedAt: service.updatedAt ? new Date(service.updatedAt) : new Date()
          }
        });
        importedServices++;
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å–µ—Ä–≤–∏—Å–∞ ${service.id}:`, error.message);
      }
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedServices} —Å–µ—Ä–≤–∏—Å–æ–≤`);

    // 2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º PriceRows (–ë–ï–ó originalRowId)
    console.log('üí∞ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º PriceRows...');
    const priceRowsData = fs.readFileSync('price_rows.json', 'utf8');
    const priceRows = JSON.parse(priceRowsData);
    
    let importedPriceRows = 0;
    for (const priceRow of priceRows) {
      try {
        await prisma.priceRow.create({
          data: {
            id: priceRow.id,
            serviceId: priceRow.serviceId,
            attrs: priceRow.attrs,
            ruleKind: priceRow.ruleKind,
            unit: priceRow.unit,
            setup: priceRow.setup,
            fixed: priceRow.fixed,
            // originalRowId: priceRow.originalRowId, // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç–æ –ø–æ–ª–µ
            isActive: Boolean(priceRow.isActive),
            createdAt: priceRow.createdAt ? new Date(priceRow.createdAt) : new Date(),
            updatedAt: priceRow.updatedAt ? new Date(priceRow.updatedAt) : new Date()
          }
        });
        importedPriceRows++;
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ price row ${priceRow.id}:`, error.message);
      }
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedPriceRows} price rows`);

    // 3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Tiers (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö price rows)
    console.log('üìä –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Tiers...');
    const tiersData = fs.readFileSync('tiers.json', 'utf8');
    const tiers = JSON.parse(tiersData);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ price row IDs
    const existingPriceRowIds = await prisma.priceRow.findMany({
      select: { id: true }
    });
    const existingPriceRowIdSet = new Set(existingPriceRowIds.map(row => row.id));
    
    let importedTiers = 0;
    let skippedTiers = 0;
    for (const tier of tiers) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ price row —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!existingPriceRowIdSet.has(tier.rowId)) {
          skippedTiers++;
          continue;
        }
        
        await prisma.tier.create({
          data: {
            id: tier.id,
            rowId: tier.rowId,
            qty: tier.qty,
            unit: tier.unit
          }
        });
        importedTiers++;
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ tier ${tier.id}:`, error.message);
      }
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedTiers} tiers (–ø—Ä–æ–ø—É—â–µ–Ω–æ ${skippedTiers})`);

    // 4. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MenuTiles
    console.log('üçΩÔ∏è –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MenuTiles...');
    const menuTilesData = fs.readFileSync('menu_tiles.json', 'utf8');
    const menuTiles = JSON.parse(menuTilesData);
    
    let importedMenuTiles = 0;
    for (const menuTile of menuTiles) {
      try {
        await prisma.menuTile.create({
          data: {
            id: menuTile.id,
            label: menuTile.label,
            href: menuTile.href,
            image: menuTile.image,
            order: menuTile.order || 0,
            isActive: Boolean(menuTile.isActive),
            createdAt: menuTile.createdAt ? new Date(menuTile.createdAt) : new Date(),
            updatedAt: menuTile.updatedAt ? new Date(menuTile.updatedAt) : new Date()
          }
        });
        importedMenuTiles++;
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ menu tile ${menuTile.id}:`, error.message);
      }
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedMenuTiles} menu tiles`);

    // 5. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º WhyArticles
    console.log('üìù –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º WhyArticles...');
    const whyArticlesData = fs.readFileSync('why_articles.json', 'utf8');
    const whyArticles = JSON.parse(whyArticlesData);
    
    let importedWhyArticles = 0;
    for (const whyArticle of whyArticles) {
      try {
        await prisma.whyArticle.create({
          data: {
            id: whyArticle.id,
            title: whyArticle.title,
            text: whyArticle.text,
            image: whyArticle.image,
            href: whyArticle.href,
            span: whyArticle.span,
            order: whyArticle.order || 0,
            isActive: Boolean(whyArticle.isActive),
            content: whyArticle.content,
            images: whyArticle.images,
            createdAt: whyArticle.createdAt ? new Date(whyArticle.createdAt) : new Date(),
            updatedAt: whyArticle.updatedAt ? new Date(whyArticle.updatedAt) : new Date()
          }
        });
        importedWhyArticles++;
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ why article ${whyArticle.id}:`, error.message);
      }
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedWhyArticles} why articles`);

    // 6. –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    console.log('‚öôÔ∏è –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
    const defaultSettings = [
      { key: 'site_name', value: 'PixelPrint', description: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞', category: 'general' },
      { key: 'site_description', value: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—á–∞—Ç—å –≤ –õ–æ–Ω–¥–æ–Ω–µ', description: '–û–ø–∏—Å–∞–Ω–∏–µ —Å–∞–π—Ç–∞', category: 'general' },
      { key: 'contact_email', value: 'info@pixelprint.com', description: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π email', category: 'contact' },
      { key: 'contact_phone', value: '+44 20 1234 5678', description: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω', category: 'contact' }
    ];

    for (const setting of defaultSettings) {
      try {
        await prisma.settings.upsert({
          where: { key: setting.key },
          update: setting,
          create: setting
        });
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${setting.key}:`, error.message);
      }
    }
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`);

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    const finalServices = await prisma.service.count();
    const finalPriceRows = await prisma.priceRow.count();
    const finalTiers = await prisma.tier.count();
    const finalMenuTiles = await prisma.menuTile.count();
    const finalWhyArticles = await prisma.whyArticle.count();
    
    console.log(`üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:`);
    console.log(`- Services: ${finalServices} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`- PriceRows: ${finalPriceRows} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`- Tiers: ${finalTiers} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`- MenuTiles: ${finalMenuTiles} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`- WhyArticles: ${finalWhyArticles} –∑–∞–ø–∏—Å–µ–π`);
    
    if (finalServices > 0 && finalPriceRows > 0) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Supabase!');
      console.log('üéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–µ–ø–ª–æ–∏—Ç—å –Ω–∞ Vercel!');
    } else {
      console.log('‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

correctImportData();
