const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkAllServices() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º JSON...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
    const services = await prisma.service.findMany({
      include: {
        rows: {
          where: { isActive: true },
          select: { id: true, attrs: true }
        }
      },
      orderBy: { name: 'asc' }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${services.length} —Å–µ—Ä–≤–∏—Å–æ–≤\n`);
    
    let problemServices = [];
    
    for (const service of services) {
      if (service.rows.length === 0) continue;
      
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ${service.name} (${service.slug}):`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º
      const firstRow = service.rows[0];
      const attrsString = firstRow.attrs;
      
      try {
        const attrs = typeof attrsString === 'string' ? JSON.parse(attrsString) : attrsString;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º (—Å–∏–º–≤–æ–ª—ã –≤–º–µ—Å—Ç–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤)
        const hasProblem = Object.keys(attrs).some(key => key.length === 1 && /[{}":,\s]/.test(key));
        
        if (hasProblem) {
          console.log(`  ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°–∏–º–≤–æ–ª—ã –≤–º–µ—Å—Ç–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤`);
          problemServices.push(service);
        } else {
          console.log(`  ‚úÖ OK: ${Object.keys(attrs).length} –∞—Ç—Ä–∏–±—É—Ç–æ–≤`);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        const attrsMap = new Map();
        service.rows.forEach(row => {
          const rowAttrs = typeof row.attrs === 'string' ? JSON.parse(row.attrs) : row.attrs;
          Object.entries(rowAttrs).forEach(([key, value]) => {
            if (!attrsMap.has(key)) {
              attrsMap.set(key, new Set());
            }
            attrsMap.get(key).add(value);
          });
        });
        
        attrsMap.forEach((values, key) => {
          const valuesArray = Array.from(values);
          console.log(`    ${key}: ${valuesArray.length} –∑–Ω–∞—á–µ–Ω–∏–π [${valuesArray.slice(0, 3).join(', ')}${valuesArray.length > 3 ? '...' : ''}]`);
        });
        
      } catch (error) {
        console.log(`  ‚ùå –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê: ${error.message}`);
        problemServices.push(service);
      }
      
      console.log('');
    }
    
    console.log('üìã –†–ï–ó–£–õ–¨–¢–ê–¢:');
    if (problemServices.length === 0) {
      console.log('‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
    } else {
      console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ ${problemServices.length} —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏:`);
      problemServices.forEach(service => {
        console.log(`  - ${service.name} (${service.slug})`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkAllServices();
